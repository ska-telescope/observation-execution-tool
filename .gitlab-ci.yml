# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.
image: $SKA_K8S_TOOLS_DOCKER_BUILDER_IMAGE

# cache is used to specify a list of files and directories which should be cached between jobs. You can only use paths that are within the project workspace.
# If cache is defined outside the scope of jobs, it means it is set globally and all jobs will use that definition
#cache:
#  paths:
#    - build

# before_script is used to define the command that should be run before all jobs, including deploy jobs, but after the restoration of artifacts.
# This can be an array or a multi-line string.
#before_script:
#  - docker login -u $CAR_OCI_REGISTRY_USERNAME -p $CAR_OCI_REGISTRY_PASSWORD $CAR_OCI_REGISTRY_HOST

# Standardised included jobs
variables:
  CHARTS_TO_PUBLISH: ska-oso-oet
include:
# Helm Chart Publish
# https://developer.skatelescope.org/en/latest/development/software_package_release_procedure.html#package-and-publish-helm-charts-to-the-ska-helm-chart-repository
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/helm_publish.yml'

# Create Gitlab CI badges from CI metrics
# https://developer.skatelescope.org/en/latest/tools/continuousintegration.html#automated-collection-of-ci-health-metrics-as-part-of-the-ci-pipeline
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/post_step.yml'
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/build_push.yml'
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/build_wheel.yml'


# The YAML file defines a set of jobs with constraints stating when they should be run.
# You can specify an unlimited number of jobs which are defined as top-level elements with an arbitrary name and always have to contain at least the script clause.
# In this case we have only the test job which produce an artifacts (it must be placed into a directory called "public")
# It is also specified that only the master branch will be subject of this job.

stages:
  - build
  - test
  - lint
  - pages
  - publish

build:
  stage: build
  tags:
    - k8srunner
  before_script:
    - echo $CAR_OCI_REGISTRY_PASSWORD | docker login -u $CAR_OCI_REGISTRY_USERNAME --password-stdin $CAR_OCI_REGISTRY_HOST
  script:
    - make build
  artifacts:
    when: always
    paths:
      - build

lint-check-chart:
  stage: lint
  tags:
    - k8srunner
  image: $SKA_K8S_TOOLS_DEPLOY_IMAGE
  script:
    - make chart_lint
  artifacts:
    paths:
      - build

test:
  stage: test
  dependencies:
    - build
  tags:
    - k8srunner
  script:
    - make test
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_JOB_ID"
    paths:
      - build
    expire_in: 7 days

#integration_test:
#  stage: test
#  dependencies:
#    - build
#  tags:
#    - k8srunner
#  variables:
#    MINIKUBE: "false"
#  environment:
#    name: oet-test
#    kubernetes:
#      namespace: ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA
#  image: nexus.engageska-portugal.pt/ska-docker/deploy:0.4.3
#  script:
#    - kubectl version
#    - make install-chart
##    - make wait
##    - make smoketest
#    - make test
#  after_script:
#    - make down
#    - mkdir -p build
#    - cp -rf charts/build/* build/
#    - ls -la build
#  artifacts:
#    name: "$CI_PROJECT_NAME-$CI_JOB_ID"
#    paths:
#      - build
#    expire_in: 7 days

lint:
  stage: lint
  tags:
    - k8srunner
  script:
    - make lint
  artifacts:
    paths:
      - build

pages:
  when: always
  tags:
    - k8srunner
  stage: pages
  dependencies:
    - test
    - lint
  script:
    - mkdir public
    - cp -R build public
  artifacts:
    paths:
      - public
    expire_in: 7 days

push_OET_image:
  tags:
    - k8srunner
  stage: publish
  before_script:
    - echo $CAR_OCI_REGISTRY_PASSWORD | docker login -u $CAR_OCI_REGISTRY_USERNAME --password-stdin $CAR_OCI_REGISTRY_HOST
  script:
    - make push
  only:
    - tags
  except:
    - branches