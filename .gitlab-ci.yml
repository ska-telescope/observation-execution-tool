# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.
image: nexus.engageska-portugal.pt/ska-docker/tango-builder:latest

# cache is used to specify a list of files and directories which should be cached between jobs. You can only use paths that are within the project workspace.
# If cache is defined outside the scope of jobs, it means it is set globally and all jobs will use that definition
cache:
  paths:
    - build

# before_script is used to define the command that should be run before all jobs, including deploy jobs, but after the restoration of artifacts.
# This can be an array or a multi-line string.
before_script:
  - docker login -u $DOCKER_REGISTRY_USERNAME -p $DOCKER_REGISTRY_PASSWORD $DOCKER_REGISTRY_HOST


# The YAML file defines a set of jobs with constraints stating when they should be run.
# You can specify an unlimited number of jobs which are defined as top-level elements with an arbitrary name and always have to contain at least the script clause.
# In this case we have only the test job which produce an artifacts (it must be placed into a directory called "public")
# It is also specified that only the master branch will be subject of this job.

stages:
  - build
  - test
  - linting
  - pages
  - publish
  - .post

build:
  tags:
    - k8srunner
  stage: build
  script:
    - make build

build_wheel_for_publication: # Executed on a tag:
  stage: build
  tags:
    - k8srunner
  script:
    - apt-get update
    - apt-get install -y python3-pip
    - pip3 install setuptools
    - python3 setup.py egg_info -b+dev.$CI_COMMIT_SHORT_SHA sdist bdist_wheel # --universal option to used for pure python packages
  artifacts:
    paths:
      - ./dist/

test:
  tags:
    - k8srunner
  stage: test
  script:
    - make test
  artifacts:
    paths:
      - build
    expire_in: 7 days

linting:
  tags:
    - k8srunner
  stage: linting
  script:
    - make lint
  artifacts:
    paths:
      - build
    expire_in: 7 days

pages:
  when: always
  tags:
    - k8srunner
  stage: pages
  dependencies:
    - test
    - linting
  script:
    - mkdir public
    - cp -R build public
  artifacts:
    paths:
      - public
    expire_in: 7 days

push_OET_image:
  tags:
    - k8srunner
  stage: publish
  script:
    - make push
  only:
    - tags
  except:
    - branches

push_SSH_image:
  tags:
    - k8srunner
  stage: publish
  script:
    - make -C extras/ssh build
    - make -C extras/ssh push
  only:
    - tags
  except:
    - branches

push_jupyter_image:
  tags:
    - k8srunner
  stage: publish
  script:
    - make -C extras/jupyter build
    - make -C extras/jupyter push
  only:
    - tags
  except:
    - branches

publish_to_nexus:
  tags:
    - k8srunner
  stage: publish
  variables:
    TWINE_USERNAME: $TWINE_USERNAME
    TWINE_PASSWORD: $TWINE_PASSWORD
  script:
    # check metadata requirements
    - apt-get update
    - apt-get install -y python3-pip
    - pip3 install setuptools
    - ./.validate-metadata.sh
    - pip3 install twine
    - twine upload --repository-url $PYPI_REPOSITORY_URL dist/*
  only:
    variables:
       - $CI_COMMIT_MESSAGE =~ /^.+$/ # Confirm tag message exists
       - $CI_COMMIT_TAG =~ /^(((?:([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*)-)?(([0-9]+)\.([0-9]+)\.([0-9]+)))$/ # Confirm semantic versioning of tag

create ci metrics:
  stage: .post
  when: always
  script:
    # Gitlab CI badges creation: START
    - apt-get -y update
    - apt-get install -y curl --no-install-recommends
    - curl -s https://gitlab.com/ska-telescope/ci-metrics-utilities/raw/master/scripts/ci-badges-func.sh | sh
    # Gitlab CI badges creation: END
  allow_failure: true
  artifacts:
    paths:
      - ./build


