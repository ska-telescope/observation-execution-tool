# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.
image: nexus.engageska-portugal.pt/ska-docker/tango-builder:latest

# cache is used to specify a list of files and directories which should be cached between jobs. You can only use paths that are within the project workspace.
# If cache is defined outside the scope of jobs, it means it is set globally and all jobs will use that definition
#cache:
#  paths:
#    - build

# before_script is used to define the command that should be run before all jobs, including deploy jobs, but after the restoration of artifacts.
# This can be an array or a multi-line string.
#before_script:
#  - docker login -u $DOCKER_REGISTRY_USERNAME -p $DOCKER_REGISTRY_PASSWORD $DOCKER_REGISTRY_HOST

# Standardised included jobs
variables:
  CHARTS_TO_PUBLISH: oet
include:
# Helm Chart Publish
# https://developer.skatelescope.org/en/latest/development/software_package_release_procedure.html#package-and-publish-helm-charts-to-the-ska-helm-chart-repository
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/helm_publish.yml'

# Create Gitlab CI badges from CI metrics
# https://developer.skatelescope.org/en/latest/tools/continuousintegration.html#automated-collection-of-ci-health-metrics-as-part-of-the-ci-pipeline
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/post_step.yml'


# The YAML file defines a set of jobs with constraints stating when they should be run.
# You can specify an unlimited number of jobs which are defined as top-level elements with an arbitrary name and always have to contain at least the script clause.
# In this case we have only the test job which produce an artifacts (it must be placed into a directory called "public")
# It is also specified that only the master branch will be subject of this job.

stages:
  - build
  - test
  - lint
  - pages
  - publish

build:
  stage: build
  tags:
    - k8srunner
  before_script:
    - docker login -u $DOCKER_REGISTRY_USERNAME -p $DOCKER_REGISTRY_PASSWORD $DOCKER_REGISTRY_HOST
  script:
    - make build
#    - make push
#    - mkdir -p image
#    - docker save nexus.engageska-portugal.pt/ska-telescope/observation-execution-tool:latest > image/latest.tar
  artifacts:
    when: always
    paths:
      - build
#      - image

build_wheel_for_publication: # Executed on a tag:
  stage: build
  tags:
    - k8srunner
  script:
    - apt-get update
    - apt-get install -y python3-pip
    - pip3 install setuptools
    - python3 setup.py egg_info -b+dev.$CI_COMMIT_SHORT_SHA sdist bdist_wheel # --universal option to used for pure python packages
  artifacts:
    paths:
      - ./dist/

lint-check-chart:
  stage: lint
  tags:
    - k8srunner
  image: nexus.engageska-portugal.pt/ska-docker/deploy:0.4.3
  script:
    - make chart_lint
  artifacts:
    paths:
      - build

test:
  stage: test
  dependencies:
    - build
  tags:
    - k8srunner
  script:
#    - docker load -i image/latest.tar
    - make test
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_JOB_ID"
    paths:
      - build
    expire_in: 7 days

#integration_test:
#  stage: test
#  dependencies:
#    - build
#  tags:
#    - k8srunner
#  variables:
#    MINIKUBE: "false"
#  environment:
#    name: oet-test
#    kubernetes:
#      namespace: ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA
#  image: nexus.engageska-portugal.pt/ska-docker/deploy:0.4.3
#  script:
#    - kubectl version
#    - make install-chart
##    - make wait
##    - make smoketest
#    - make test
#  after_script:
#    - make down
#    - mkdir -p build
#    - cp -rf charts/build/* build/
#    - ls -la build
#  artifacts:
#    name: "$CI_PROJECT_NAME-$CI_JOB_ID"
#    paths:
#      - build
#    expire_in: 7 days

lint:
  stage: lint
  tags:
    - k8srunner
  script:
#    - docker load -i image/latest.tar
    - make build
    - make lint
  artifacts:
    paths:
      - build

pages:
  when: always
  tags:
    - k8srunner
  stage: pages
  dependencies:
    - test
    - lint
  script:
    - mkdir public
    - cp -R build public
  artifacts:
    paths:
      - public
    expire_in: 7 days

push_OET_image:
  tags:
    - k8srunner
  stage: publish
  before_script:
    - docker login -u $DOCKER_REGISTRY_USERNAME -p $DOCKER_REGISTRY_PASSWORD $DOCKER_REGISTRY_HOST
  script:
    - make build
    - make push
  only:
    - tags
  except:
    - branches

publish_to_nexus:
  tags:
    - k8srunner
  stage: publish
  variables:
    TWINE_USERNAME: $TWINE_USERNAME
    TWINE_PASSWORD: $TWINE_PASSWORD
  script:
    # check metadata requirements
    - apt-get update
    - apt-get install -y python3-pip
    - pip3 install setuptools
    - ./.validate-metadata.sh
    - pip3 install twine
    - twine upload --repository-url $PYPI_REPOSITORY_URL dist/*
  only:
    variables:
       - $CI_COMMIT_MESSAGE =~ /^.+$/ # Confirm tag message exists
       - $CI_COMMIT_TAG =~ /^(((?:([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*)-)?(([0-9]+)\.([0-9]+)\.([0-9]+)))$/ # Confirm semantic versioning of tag

#create ci metrics:
#  stage: .post
#  when: always
#  script:
#    # Gitlab CI badges creation: START
#    - apt-get -y update
#    - apt-get install -y curl --no-install-recommends
#    - curl -s https://gitlab.com/ska-telescope/ci-metrics-utilities/raw/master/scripts/ci-badges-func.sh | sh
#    # Gitlab CI badges creation: END
#  allow_failure: true
#  artifacts:
#    paths:
#      - ./build


