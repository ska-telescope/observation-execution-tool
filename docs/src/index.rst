.. skeleton documentation master file, created by
   sphinx-quickstart on Thu May 17 15:17:35 2018.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.


.. HOME SECTION ==================================================

.. Hidden toctree to manage the sidebar navigation.

.. toctree::
  :maxdepth: 1
  :caption: Home
  :hidden:

  rest_client


.. toctree::
  :maxdepth: 1
  :caption: Architecture
  :hidden:

  architecture_backend_candc
  architecture_backend_module_execution
  architecture_backend_module_ui
  architecture_module_rest_api


.. COMMUNITY SECTION ==================================================

.. Hidden toctree to manage the sidebar navigation.

.. toctree::
  :maxdepth: 1
  :caption: Public API Documentation
  :hidden:

  package/oet/command
  package/oet/features


==========================
Observation Execution Tool
==========================

Project description
===================

The `ska-oso-oet` project contains the code for the Observation Execution
Tool (OET), the application which provides on-demand Python script execution
for the SKA.

Overview
========
The core of the OET is a script execution engine which runs a requested script
in a child Python process. The engine supervises script execution, in that it
can terminate the script at any time when requested, and captures the output
and/or errors generated by the script for inspection by a (remote) client.

A REST layer makes the Python API for the script execution engine available
via REST over HTTP. This project also contains a command line client to allow
users to submit script execution requests to a remote OET backend.

The REST layer is made up of two components that work together to provide the
remote script execution functionality:

- The OET REST server maintains a list of the scripts that have been
  loaded and their current state. The server implements the interface specified
  by the OET :doc:`architecture_module_rest_api`.
- The OET :doc:`rest_client` provides a Command Line Interface (CLI) to the
  OET backend.

More details on the OET architecture can be found in :doc:`architecture_backend_candc`.

.. note::
   SKA control scripts are not packaged as part of this project. The repository
   of observing scripts executed by the OET can be found in the
   `ska-oso-scripting <https://developer.skatelescope.org/projects/ska-oso-scripting/en/latest/index.html>`_
   project.

Quickstart
==========
Build a new OET image:

::

  make oci-build

Execute the test suite and lint the project with:

::

  make python-test
  make python-lint


Makefile targets
================
This project extends the standard SKA Make targets with a few additional Make
targets that can be useful for developers. These targets are:

+-----------------+------------------------------------------------+
| Makefile target | Description                                    |
+=================+================================================+
| dev-up          | deploy the OET using the current developer     |
|                 | image, exposing REST ingress on the host       |
+-----------------+------------------------------------------------+
| dev-down        | tear down the developer OET deployment         |
+-----------------+------------------------------------------------+
| rest            | start the OET backend in a Docker container    |
+-----------------+------------------------------------------------+
| k8s-chart-test  | run helm chart unit tests                      |
+-----------------+------------------------------------------------+
| help            | show a summary of the makefile targets above   |
+-----------------+------------------------------------------------+

Local development with k8s
==========================
OET REST server can be deployed locally using Helm and Kubernetes and OET CLI
:doc:`rest_client` can be used to communicate with the server. OET CLI is
installed as part of the Poetry virtual environment (see README) or can be
used inside a running OET container/pod.

If using OET CLI within Poetry virtual environment these steps are needed
for the CLI to access the REST server:

- set `rest.ingress.enabled` to `true` in `charts/ska-oso-oet/values.yaml`
- set `OET_REST_URI` environment variable with `export OET_REST_URI=http://<minikube IP>/ska-oso-oet/api/v1.0/procedures`

To deploy OET REST server run

::

   make k8s-chart-install && make k8s-wait



Feature flags
=============
OET feature flags are configured via environment variables and configuration
files. The configuration file, ska_oso_oet.ini, can be located either in the user's
home directory, or the root of the installation folder.

Feature flags are read in this order:

#. environment variable;
#. ska_oso_oet.ini configuration file;
#. default flag value as specified in OET code.

No feature flags are available at this time.
