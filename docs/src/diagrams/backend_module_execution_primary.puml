@startuml
'https://plantuml.com/class-diagram

package ska_oso_oet_client {
    package restclient <<Rectangle>> {
        class RestClientUI {
            create(...)
            start(...)
            stop(...)
            list(...)
            describe(...)
            listen(...)
        }
    }
}

package ska_oso_oet {

    package main <<Rectangle>> {
        class ScriptExecutionServiceWorker {
            prepare(...)
            start(...)
            stop(...)
            list(...)
            on_load(evt: EventMessage)
            on_run(evt: EventMessage)
            on_env(evt: EventMessage)
            on_pubsub(evt: EventMessage)
        }

        class FlaskWorker {
        }

        class EventBusWorker {
            main_loop(...)
            main_func(...)
            republish(...)
        }

        ScriptExecutionServiceWorker -up-> EventBusWorker
        FlaskWorker -up-> EventBusWorker
    }

    package ui <<Rectangle>> {
        class app <<function return value>> {
        }
    }

    package procedure {
        package ui as procedure_ui <<Rectangle>> {
            class ProcedureAPI
            app o-- ProcedureAPI
        }

        package application <<Rectangle>> {
            class ScriptExecutionService {
                prepare(cmd: PrepareProcessCommand) -> ProcedureSummary
                start(cmd: StartProcessCommand) -> ProcedureSummary
                stop(cmd: StopProcessCommand) -> List[ProcedureSummary]
                summarise(pids: List[int]) -> List[[ProcedureSummary]
            }

            class ProcedureSummary {
                id: int
                script: domain.ExecutableScript
                script_args: List[ArgCapture]
                state: domain.ProcedureState
            }

            class ArgCapture {
                fn: str
                fn_args: domain.ProcedureInput
                time: float
            }
            ProcedureSummary -right-|> ArgCapture

            class ProcedureHistory {
                {field} process_states: List[(ProcedureState, time)]
                stacktrace: Optional[str]
            }
            ProcedureSummary --> ProcedureHistory

            class PrepareProcessCommand {
                script: domain.ExecutableScript
                init_args: domain.ProcedureInput
            }

            class StartProcessCommand {
                process_uid: int
                fn_name: str
                run_args: domain.ProcedureInput
            }

            class StopProcessCommand {
                process_uid: int
                run_abort: bool
            }
            PrepareProcessCommand -up[hidden]- StartProcessCommand
            StartProcessCommand -up[hidden]- StopProcessCommand
        }
        FlaskWorker *-- app
        ScriptExecutionServiceWorker *-- ScriptExecutionService

        package domain <<Rectangle>> {
            abstract class ExecutableScript
            class GitScript
            class FilesystemScript
            class EmbeddedStringScript
            GitScript --> ExecutableScript
            FilesystemScript --> ExecutableScript
            EmbeddedStringScript --> ExecutableScript

            enum ProcedureState {
                UNKNOWN
                CREATING
                IDLE
                LOADING
                READY
                RUNNING
                COMPLETE
                STOPPED
                FAILED
            }

            class ProcedureInput {
                args: List
                kwargs: Dict[str, Any]
            }
        }
        ProcedureHistory ---> ProcedureState
        ProcedureSummary --> ProcedureInput
    }

}

package flask {
    class Flask
    class Blueprint
}

app -|> Flask
ProcedureAPI -|> Blueprint
Blueprint -up[hidden]- Flask

PrepareProcessCommand -right[hidden] StartProcessCommand
StartProcessCommand -right[hidden] StopProcessCommand
ScriptExecutionService -down[hidden]- ArgCapture
ScriptExecutionService -down[hidden]- StopProcessCommand
ProcedureSummary -up[hidden]- StartProcessCommand
@enduml
